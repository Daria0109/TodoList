{"version":3,"sources":["assets/404-error.jpg","serviceWorker.ts","api/tasks-api.ts","api/todolists-api.ts","api/auth-api.ts","helpers/error-helpers.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/Todolist/todolists-reducer.ts","features/TodolistsList/Todolist/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/Error404/Error404.tsx","components/Header/Header.tsx","components/Preloader/Preloader.tsx","app/AppWithRedux.tsx","app/store.ts","index.tsx","components/Error404/Error404.module.css","features/TodolistsList/Todolist/Todolist.module.css","features/Login/Login.module.css","components/Preloader/Preloader.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","then","res","data","title","post","todolistID","delete","put","authAPI","handleServerAppError","dispatch","messages","length","appActions","setErrorAC","setStatusAC","handleServerNetworkError","error","message","authActions","isLoggedIn","type","login","initialState","authReducer","state","action","status","setIsAppInitialized","isAppInitialised","isAppInitialized","appReducer","initializeApp","a","resultCode","todolistsActions","removeTodolistAC","todolistId","addTodolistAC","todolist","changeTodolistFilterAC","filterValue","changeTodolistTitleAC","setTodolistsAC","todolists","changeEntityStatusAC","entityStatus","tasksAPI","taskId","model","taskActions","task","tasks","updateTaskTC","domainModel","getState","find","t","id","console","warn","apiModel","deadline","description","priority","startDate","useStyles","makeStyles","theme","createStyles","textField","width","AddItemForm","React","memo","addItem","disabled","classes","useState","itemTitle","setItemTitle","setError","onAddItemHandler","trim","textFieldStyle","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","key","className","helperText","IconButton","onClick","color","AddBox","EditableSpan","editTitle","notEdited","editMode","setEditMode","editedTitle","setEditedTitle","activateViewMode","autoFocus","onBlur","onDoubleClick","Task","props","editTaskTitle","useCallback","Checkbox","checked","Completed","newCheckedValue","New","changeTaskStatus","removeTask","Delete","Todolist","useSelector","auth","useDispatch","useEffect","items","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","removeTodoList","onAddTask","addTask","editTodoListTitle","tasksForTodoList","filter","s","map","buttons","Button","paper","padding","backgroundColor","addItemFormGrid","TodolistsList","taskTitle","item","createTaskTC","deleteTaskTC","todoListId","removeTodolist","deleteTodolistTC","addTodolist","createTodolistTC","updateTodolistTC","Grid","container","spacing","tl","xs","sm","md","lg","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","errors","email","test","password","initialValues","rememberMe","onSubmit","loginData","resetForm","justify","handleSubmit","form","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","fieldError","FormControlLabel","control","Error404","error_block","error_img","src","errorImage","alt","error_text","error_header","error_paragraph","menuButton","marginRight","loginItems","marginLeft","display","alignItems","logoutBtn","Header","onLogout","AppBar","position","Toolbar","edge","aria-label","Menu","Box","Preloader","preloaderPage","preloader","createMuiTheme","palette","primary","main","secondary","root","maxWidth","minHeight","paddingBottom","headerGrid","AppWithRedux","ThemeProvider","direction","LinearProgress","exact","path","render","from","rootReducer","combineReducers","stateCopy","copyState","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.41a0c1b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/404-error.3928156a.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {APIResponseType} from './todolists-api';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists/',\r\n  withCredentials: true,\r\n  headers: {'API-KEY': 'bcb04db8-51e3-4a52-abad-1b8669db5951'}\r\n})\r\n\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  High = 2,\r\n  Urgently = 3,\r\n  Late = 4\r\n}\r\n\r\nexport type TaskType = {\r\n  addedDate: string\r\n  deadline: string\r\n  description: string\r\n  id: string\r\n  order: number\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  status: TaskStatuses\r\n  title: string\r\n  todoListId: string\r\n}\r\n\r\ntype GetResponseTaskType = {\r\n  items: Array<TaskType>\r\n  totalCount: number\r\n  error: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n}\r\n\r\nexport const tasksAPI = {\r\n  getTasks(todolistId: string) {\r\n    return instance.get<GetResponseTaskType>(`${todolistId}/tasks`)\r\n      .then(res => res.data)\r\n  },\r\n  createTask(todolistId: string, title: string) {\r\n    return instance.post<APIResponseType<{ item: TaskType }>>(`${todolistId}/tasks`, {title})\r\n      .then(res => res.data)\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<APIResponseType>(`${todolistId}/tasks/${taskId}`)\r\n      .then(res => res.data)\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n    return instance.put<APIResponseType<{ item: TaskType}>>(`${todolistId}/tasks/${taskId}`, model)\r\n      .then(res => res.data)\r\n  }\r\n}","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  withCredentials: true,\r\n  headers: {'API-KEY': 'bcb04db8-51e3-4a52-abad-1b8669db5951'}\r\n})\r\n\r\nexport type TodolistsType = {\r\n  id: string\r\n  addedDate: string\r\n  order: number\r\n  title: string\r\n}\r\nexport type APIResponseType<T = {}> = {\r\n  data: T\r\n  resultCode: number\r\n  messages: Array<string>\r\n  fieldsErrors: Array<string>\r\n}\r\n\r\n\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    return instance.get<Array<TodolistsType>>('todo-lists')\r\n      .then(res => res.data)\r\n  },\r\n  createTodolist(title: string) {\r\n    return instance.post<APIResponseType<{item: TodolistsType}>>('todo-lists', {title})\r\n      .then(res => res.data)\r\n  },\r\n  deleteTodolist(todolistID: string) {\r\n    return instance.delete<APIResponseType>(`todo-lists/${todolistID}`)\r\n      .then(res => res.data)\r\n  },\r\n  updateTodolist(todolistID: string, title: string) {\r\n    return instance.put<APIResponseType>(`todo-lists/${todolistID}`, {title})\r\n      .then(res => res.data)\r\n  }\r\n}\r\n\r\n","import axios from 'axios'\r\nimport {APIResponseType} from './todolists-api';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  withCredentials: true,\r\n  headers: {'API-KEY': 'bcb04db8-51e3-4a52-abad-1b8669db5951'}\r\n})\r\n\r\nexport type LoginParamsType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha?: string\r\n}\r\nexport type AuthDataType = {\r\n  id: number\r\n  email: string\r\n  login: string\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n  login(data: LoginParamsType) {\r\n    return instance.post<APIResponseType<{userId: number}>>('auth/login', data)\r\n      .then(res => res.data)\r\n  },\r\n  logout() {\r\n    return instance.delete<APIResponseType>('auth/login')\r\n      .then(res => res.data)\r\n  },\r\n  me() {\r\n    return instance.get<APIResponseType<AuthDataType>>('auth/me')\r\n      .then(res => res.data)\r\n  }\r\n}","import {appActions, AppActionsType} from '../app/app-reducer';\r\nimport {APIResponseType} from '../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const handleServerAppError = <T>(data: APIResponseType<T>, dispatch: Dispatch<AppActionsType>) => {\r\n  if (data.messages.length) {\r\n    dispatch(appActions.setErrorAC(data.messages[0]))\r\n  } else {\r\n    dispatch(appActions.setErrorAC('Some error occurred'))\r\n  }\r\n  dispatch(appActions.setStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: any, dispatch: Dispatch<AppActionsType>) => {\r\n  dispatch(appActions.setErrorAC(error.message ? error.message : 'Some error occurred'))\r\n  dispatch(appActions.setStatusAC('failed'))\r\n}","// A c t i o n s\r\nimport {Dispatch} from 'redux';\r\nimport {authAPI, LoginParamsType} from '../../api/auth-api';\r\nimport {appActions, AppActionsType, initializeApp} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../helpers/error-helpers';\r\n\r\nexport const authActions = {\r\n  setIsLoggedIn: (isLoggedIn: boolean) => ({\r\n    type: 'todolist/login/SET-IS-LOGGED-IN', isLoggedIn} as const),\r\n  setLogin: (login: string) => ({\r\n    type: 'todolist/login/SET-LOGIN', login} as const)\r\n}\r\ntype ActionType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type AuthActionsType = ReturnType<ActionType<typeof authActions>>\r\n\r\n\r\n// S t a t e\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n  login: null as string | null\r\n}\r\nexport type AuthStateType = typeof initialState\r\n\r\n// R e d u c e r\r\nconst authReducer = (state: AuthStateType = initialState, action: AuthActionsType): AuthStateType => {\r\n  switch (action.type) {\r\n    case 'todolist/login/SET-IS-LOGGED-IN':\r\n      return {\r\n        ...state,\r\n        isLoggedIn: action.isLoggedIn\r\n      }\r\n    case 'todolist/login/SET-LOGIN':\r\n      return {\r\n        ...state,\r\n        login: action.login\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\nexport default authReducer;\r\n\r\n// T h u n k\r\nexport const login = (loginData: LoginParamsType) => {\r\n  return async (dispatch: Dispatch<AuthActionsType | AppActionsType | any>) => {\r\n    try {\r\n      dispatch(appActions.setStatusAC('loading'))\r\n      const data= await authAPI.login(loginData)\r\n      if (data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn(true))\r\n        dispatch(initializeApp())\r\n        dispatch(appActions.setStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(data, dispatch)\r\n      }\r\n    } catch(error) {\r\n      handleServerNetworkError(error, dispatch)\r\n    }\r\n  }\r\n}\r\nexport const logout = () => {\r\n  return async  (dispatch: Dispatch<AuthActionsType | AppActionsType>) => {\r\n    try {\r\n      dispatch(appActions.setStatusAC('loading'))\r\n      const data = await authAPI.logout()\r\n      if (data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn(false))\r\n        dispatch(appActions.setStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(data, dispatch)\r\n      }\r\n    } catch(error) {\r\n      handleServerNetworkError(error, dispatch)\r\n    }\r\n  }\r\n}","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../api/auth-api';\r\nimport {authActions, AuthActionsType} from '../features/Login/auth-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../helpers/error-helpers';\r\n\r\nexport const appActions = {\r\n  setStatusAC: (status: RequestStatusType) => ({\r\n    type: 'todolist/app/SET-STATUS', status\r\n  } as const),\r\n  setErrorAC: (error: string | null) => ({\r\n    type: 'todolist/app/SET-ERROR', error\r\n  } as const),\r\n  setIsAppInitialized: (isAppInitialised: boolean) => ({\r\n    type: 'todolist/app/SET-IS-APP-INITIALIZED', isAppInitialised\r\n  } as const)\r\n}\r\n\r\ntype ActionType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type AppActionsType = ReturnType<ActionType<typeof appActions>>\r\n\r\nconst initialState: AppInitialStateType = {\r\n  status: 'idle',\r\n  error: null,\r\n  isAppInitialized: false\r\n}\r\nexport type AppInitialStateType = {\r\n  status: RequestStatusType\r\n  error: string | null\r\n  isAppInitialized: boolean\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nconst appReducer = (state: AppInitialStateType = initialState, action: AppActionsType): AppInitialStateType => {\r\n  switch (action.type) {\r\n    case 'todolist/app/SET-STATUS':\r\n      return {\r\n        ...state,\r\n        status: action.status\r\n      }\r\n    case 'todolist/app/SET-ERROR':\r\n      return {\r\n        ...state,\r\n        error: action.error\r\n      }\r\n    case 'todolist/app/SET-IS-APP-INITIALIZED':\r\n      return {\r\n        ...state,\r\n        isAppInitialized: action.isAppInitialised\r\n      }\r\n    default:\r\n      return {...state}\r\n  }\r\n}\r\nexport default appReducer;\r\n\r\n// T h u n k\r\nexport const initializeApp = () => {\r\n  return async (dispatch: Dispatch<AppActionsType | AuthActionsType>) => {\r\n    try {\r\n      const data = await authAPI.me()\r\n      if (data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn(true))\r\n        dispatch(authActions.setLogin(data.data.login))\r\n      } else {\r\n        if (data.messages.length !== 0) {\r\n          handleServerAppError(data, dispatch)\r\n        }\r\n      }\r\n      dispatch(appActions.setIsAppInitialized(true))\r\n    } catch(error) {\r\n      handleServerNetworkError(error, dispatch)\r\n    }\r\n  }\r\n}\r\n","import {todolistsAPI, TodolistsType} from '../../../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\nimport {appActions, AppActionsType, RequestStatusType} from '../../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../helpers/error-helpers';\r\n\r\n// A c t i o n s\r\nexport const todolistsActions = {\r\n  removeTodolistAC: (todolistId: string) => ({\r\n    type: 'todolist/todolists/REMOVE-TODOLIST', todolistId\r\n  } as const),\r\n  addTodolistAC: (todolist: TodolistsType) => ({\r\n    type: 'todolist/todolists/ADD-TODOLIST', todolist\r\n  } as const),\r\n  changeTodolistFilterAC: (filterValue: FilterType, todolistId: string) => ({\r\n    type: 'todolist/todolists/CHANGE-TODOLIST-FILTER', filterValue, todolistId\r\n  } as const),\r\n  changeTodolistTitleAC: (title: string, todolistId: string) => ({\r\n    type: 'todolist/todolists/CHANGE-TODOLIST-TITLE', title, todolistId\r\n  } as const),\r\n  setTodolistsAC: (todolists: Array<TodolistsType>) => ({\r\n    type: 'todolist/todolists/SET-TODOLISTS', todolists\r\n  } as const),\r\n  changeEntityStatusAC: (todolistId: string, entityStatus: RequestStatusType) => ({\r\n    type: 'todolist/todolists/CHANGE-ENTITY-STATUS', todolistId, entityStatus\r\n  } as const)\r\n}\r\n\r\ntype ActionType<T> = T extends { [key: string]: infer U } ? U : never;\r\ntype TodolistsActionsType = ReturnType<ActionType<typeof todolistsActions>>\r\n\r\n// T y p e s\r\nexport type FilterType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistsType & {\r\n  filter: FilterType\r\n  entityStatus: RequestStatusType\r\n}\r\n\r\n// S t a t e\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n// R e d u c e r\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case 'todolist/todolists/REMOVE-TODOLIST':\r\n      return state.filter(tl => tl.id !== action.todolistId);\r\n    case 'todolist/todolists/ADD-TODOLIST':\r\n      return [\r\n        {...action.todolist, filter: 'all', entityStatus: 'idle'},\r\n        ...state,\r\n      ]\r\n    case 'todolist/todolists/CHANGE-TODOLIST-FILTER':\r\n      return state.map(tl =>\r\n        tl.id === action.todolistId ? {...tl, filter: action.filterValue} : tl)\r\n    case 'todolist/todolists/CHANGE-TODOLIST-TITLE':\r\n      return state.map(tl =>\r\n        tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n    case 'todolist/todolists/SET-TODOLISTS':\r\n      return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n    case 'todolist/todolists/CHANGE-ENTITY-STATUS':\r\n      return state.map(tl =>\r\n        tl.id === action.todolistId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// T h u n k\r\nexport const fetchTodolistsTC = () => {\r\n  return async (dispatch: Dispatch<TodolistsActionsType | AppActionsType>) => {\r\n    try {\r\n      dispatch(appActions.setStatusAC('loading'))\r\n      const data = await todolistsAPI.getTodolists()\r\n      dispatch(todolistsActions.setTodolistsAC(data))\r\n      dispatch(appActions.setStatusAC('succeeded'))\r\n    } catch(error) {\r\n      handleServerNetworkError(error, dispatch)\r\n    }\r\n  }\r\n}\r\nexport const deleteTodolistTC = (todolistId: string) => {\r\n  return async (dispatch: Dispatch<TodolistsActionsType | AppActionsType> ) => {\r\n    try {\r\n      dispatch(appActions.setStatusAC('loading'))\r\n      dispatch(todolistsActions.changeEntityStatusAC(todolistId, 'loading'))\r\n      const data = await todolistsAPI.deleteTodolist(todolistId)\r\n      if (data.resultCode === 0) {\r\n        dispatch(todolistsActions.removeTodolistAC(todolistId))\r\n        dispatch(appActions.setStatusAC('succeeded'))\r\n      }\r\n    } catch(error) {\r\n      handleServerNetworkError(error, dispatch)\r\n      dispatch(todolistsActions.changeEntityStatusAC(todolistId, 'failed'))\r\n    }\r\n  }\r\n}\r\nexport const createTodolistTC = (title: string) => {\r\n  return async (dispatch: Dispatch<TodolistsActionsType | AppActionsType>) => {\r\n    try {\r\n      dispatch(appActions.setStatusAC('loading'))\r\n      const data = await todolistsAPI.createTodolist(title)\r\n      if (data.resultCode === 0) {\r\n        dispatch(todolistsActions.addTodolistAC(data.data.item))\r\n        dispatch(appActions.setStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(data, dispatch)\r\n      }\r\n    } catch(error) {\r\n      handleServerNetworkError(error, dispatch)\r\n    }\r\n  }\r\n}\r\nexport const updateTodolistTC = (editedTitle: string, todoListId: string) => {\r\n  return async (dispatch: Dispatch<TodolistsActionsType | AppActionsType>) => {\r\n    try {\r\n      dispatch(appActions.setStatusAC('loading'))\r\n      const data = await todolistsAPI.updateTodolist(todoListId, editedTitle)\r\n      if (data.resultCode === 0) {\r\n        dispatch(todolistsActions.changeTodolistTitleAC(editedTitle, todoListId))\r\n        dispatch(appActions.setStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(data, dispatch)\r\n      }\r\n    } catch(error) {\r\n      handleServerNetworkError(error, dispatch)\r\n    }\r\n  }\r\n}","import {todolistsActions} from './todolists-reducer';\r\nimport {TaskPriorities, tasksAPI, TaskStatuses, TaskType, UpdateTaskModelType} from '../../../api/tasks-api';\r\nimport {Dispatch} from 'redux';\r\nimport {AppRootStateType} from '../../../app/store';\r\nimport {appActions, AppActionsType, RequestStatusType} from '../../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../helpers/error-helpers';\r\n\r\n// A c t i o n s\r\nexport const taskActions = {\r\n  removeTaskAC: (taskId: string, todolistId: string) => ({\r\n    type: 'todolist/tasks/REMOVE-TASK', taskId, todolistId\r\n  } as const),\r\n  addTaskAC: (todolistId: string, task: TaskType) => ({\r\n    type: 'todolist/tasks/ADD-TASK', todolistId, task\r\n  } as const),\r\n  changeTaskAC: (todolistId: string, taskId: string, model: UpdateDomainTaskModelType) => ({\r\n    type: 'todolist/tasks/CHANGE-TASK', taskId, todolistId, model\r\n  } as const),\r\n  addTodolistAC: todolistsActions.addTodolistAC,\r\n  removeTodolistAC: todolistsActions.removeTodolistAC,\r\n  setTodolistsAC: todolistsActions.setTodolistsAC,\r\n  setTasksAC: (todolistId: string, tasks: Array<TaskType>) => ({\r\n    type: 'todolist/tasks/SET-TASKS', todolistId, tasks\r\n  } as const),\r\n  changeEntityStatus: (todolistId: string, taskId: string, status: RequestStatusType) => ({\r\n    type: 'todolist/tasks/CHANGE-ENTITY-STATUS', todolistId, taskId, status\r\n  } as const)\r\n}\r\ntype ActionType<T> = T extends { [key: string]: infer U } ? U : never;\r\ntype TasksActionsType = ReturnType<ActionType<typeof taskActions>>\r\n\r\n\r\n// T y p e s\r\nexport type TaskDomainType = TaskType & {\r\n  entityStatus: RequestStatusType\r\n}\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskDomainType>\r\n}\r\n\r\n// S t a t e\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\n// R e d u c e r\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionsType): TasksStateType => {\r\n  switch (action.type) {\r\n    case 'todolist/tasks/REMOVE-TASK':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)\r\n      };\r\n    case 'todolist/tasks/ADD-TASK':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: [{...action.task, entityStatus: 'idle'}, ...state[action.todolistId]\r\n        ]\r\n      };\r\n    case 'todolist/tasks/CHANGE-TASK':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId].map(t =>\r\n          t.id === action.taskId ? {...t, ...action.model} : t)\r\n      }\r\n    case 'todolist/todolists/ADD-TODOLIST':\r\n      return {\r\n        [action.todolist.id]: [],\r\n        ...state,\r\n      }\r\n    case 'todolist/todolists/REMOVE-TODOLIST':\r\n      let stateCopy = {...state};\r\n      delete stateCopy[action.todolistId];\r\n      return stateCopy;\r\n    case 'todolist/todolists/SET-TODOLISTS':\r\n      const copyState = {...state}\r\n      action.todolists.forEach(tl => {\r\n        copyState[tl.id] = []\r\n      })\r\n      return copyState\r\n    case 'todolist/tasks/SET-TASKS':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: action.tasks.map(t => ({...t, entityStatus: 'idle'}))\r\n      }\r\n    case 'todolist/tasks/CHANGE-ENTITY-STATUS':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId].map(t =>\r\n        t.id === action.taskId ? {...t, entityStatus: action.status} : t)\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// T h u n k\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n  return async (dispatch: Dispatch<TasksActionsType | AppActionsType>) => {\r\n    try {\r\n      dispatch(appActions.setStatusAC('loading'))\r\n      const data = await tasksAPI.getTasks(todolistId)\r\n      dispatch(taskActions.setTasksAC(todolistId, data.items))\r\n      dispatch(appActions.setStatusAC('succeeded'))\r\n    } catch(error) {\r\n      handleServerNetworkError(error, dispatch)\r\n    }\r\n  }\r\n}\r\nexport const createTaskTC = (taskTitle: string, todolistId: string) => {\r\n  return async (dispatch: Dispatch<TasksActionsType | AppActionsType>) => {\r\n    try {\r\n      dispatch(appActions.setStatusAC('loading'))\r\n      const data = await tasksAPI.createTask(todolistId, taskTitle)\r\n      if (data.resultCode === 0) {\r\n        dispatch(taskActions.addTaskAC(todolistId, data.data.item))\r\n        dispatch(appActions.setStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(data, dispatch)\r\n      }\r\n    } catch(error) {\r\n      handleServerNetworkError(error, dispatch)\r\n    }\r\n  }\r\n}\r\nexport const deleteTaskTC = (taskId: string, todolistId: string) => {\r\n  return async (dispatch: Dispatch<TasksActionsType | AppActionsType>) => {\r\n    try {\r\n      dispatch(appActions.setStatusAC('loading'))\r\n      dispatch(taskActions.changeEntityStatus(todolistId, taskId, 'loading'))\r\n      const data = await tasksAPI.deleteTask(todolistId, taskId)\r\n      if (data.resultCode === 0) {\r\n        dispatch(taskActions.removeTaskAC(taskId, todolistId))\r\n        dispatch(appActions.setStatusAC('succeeded'))\r\n      }\r\n    } catch(error) {\r\n      handleServerNetworkError(error, dispatch)\r\n      dispatch(taskActions.changeEntityStatus(todolistId, taskId, 'failed'))\r\n    }\r\n  }\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\nexport const updateTaskTC = (domainModel: UpdateDomainTaskModelType, taskId: string, todolistId: string) => {\r\n  return async (dispatch: Dispatch<TasksActionsType | AppActionsType>, getState: () => AppRootStateType) => {\r\n    const state = getState();\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n      console.warn('Task is not found in state')\r\n    } else {\r\n      const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        status: task.status,\r\n        title: task.title,\r\n        ...domainModel\r\n      }\r\n      try {\r\n        dispatch(appActions.setStatusAC('loading'))\r\n        dispatch(taskActions.changeEntityStatus(todolistId, taskId, 'loading'))\r\n        const data = await tasksAPI.updateTask(todolistId, taskId, apiModel)\r\n        if (data.resultCode === 0) {\r\n          dispatch(taskActions.changeTaskAC(todolistId, taskId, domainModel))\r\n          dispatch(appActions.setStatusAC('succeeded'))\r\n          dispatch(taskActions.changeEntityStatus(todolistId, taskId, 'succeeded'))\r\n        } else {\r\n          handleServerAppError(data, dispatch)\r\n          dispatch(taskActions.changeEntityStatus(todolistId, taskId, 'failed'))\r\n        }\r\n      } catch(error) {\r\n        handleServerNetworkError(error, dispatch)\r\n        dispatch(taskActions.changeEntityStatus(todolistId, taskId, 'failed'))\r\n      }\r\n    }\r\n  }\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {createStyles, IconButton, makeStyles, TextField, Theme} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    textField: {\r\n      width: '75%'\r\n    }\r\n  })\r\n);\r\n\r\nexport type AddItemFormPropsType = {\r\n  addItem: (itemTitle: string) => void\r\n  disabled?: boolean\r\n}\r\n\r\nconst AddItemForm: React.FC<AddItemFormPropsType> = React.memo(({addItem, disabled = false}) => {\r\n  const classes = useStyles();\r\n  let [itemTitle, setItemTitle] = useState('');\r\n  let [error, setError] = useState<string | null>(null)\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setItemTitle(e.currentTarget.value)\r\n  }\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null)\r\n    }\r\n    if (e.key === 'Enter') {\r\n      onAddItemHandler()\r\n    }\r\n  }\r\n  const onAddItemHandler = () => {\r\n    if (itemTitle.trim()) {\r\n      addItem(itemTitle);\r\n      setItemTitle('');\r\n    } else {\r\n      setError('Title is required')\r\n    }\r\n  }\r\n  const textFieldStyle = error ? 'error' : ''\r\n\r\n  return <div>\r\n      <TextField value={itemTitle}\r\n                 variant={'outlined'}\r\n                 label={'Title'}\r\n                 onChange={onChangeHandler}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 className={`${textFieldStyle}  ${classes.textField}`}\r\n                 error={!!error}\r\n                 helperText={error}\r\n                 disabled={disabled}/>\r\n      <IconButton onClick={onAddItemHandler}\r\n                  color={'primary'}\r\n                  disabled={disabled}>\r\n        <AddBox/>\r\n      </IconButton>\r\n    </div>\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\n\r\nexport type EditableSpanPropsType = {\r\n  title: string\r\n  editTitle: (editedTitle: string) => void\r\n  notEdited: boolean\r\n}\r\n\r\nconst EditableSpan: React.FC<EditableSpanPropsType> = React.memo(({title, editTitle, notEdited}) => {\r\n  const [editMode, setEditMode] = useState<boolean>(false);\r\n  const [editedTitle, setEditedTitle] = useState<string>('');\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setEditedTitle(e.currentTarget.value)\r\n  }\r\n  const activateViewMode = () => {\r\n    setEditMode(false);\r\n    editTitle(editedTitle)\r\n  }\r\n  const activateEditMode = () => {\r\n    if (notEdited) return;\r\n    setEditMode(true);\r\n    setEditedTitle(editedTitle)\r\n  }\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      activateViewMode()\r\n    }\r\n  }\r\n\r\n  return (\r\n    editMode ?\r\n      <TextField autoFocus\r\n                 value={editedTitle}\r\n                 onChange={onChangeTitle}\r\n                 onBlur={activateViewMode}\r\n                 onKeyPress={onKeyPressHandler}/> :\r\n      <span onDoubleClick={activateEditMode}>{title}</span>\r\n  )\r\n})\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport EditableSpan from '../../../../components/EditableSpan/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses} from '../../../../api/tasks-api';\r\nimport {TaskDomainType} from '../tasks-reducer';\r\n\r\nexport type TaskPropsType = {\r\n  task: TaskDomainType\r\n  todolistId: string\r\n  removeTask: (id: string, todoListId: string) => void\r\n  changeTaskStatus: (status: TaskStatuses, taskId: string, todoListId: string) => void\r\n  editTaskTitle: (editedTitle: string, taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n  const onClickHandler = () => props.removeTask(props.task.id, props.todolistId);\r\n\r\n  const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const newCheckedValue = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n    props.changeTaskStatus(newCheckedValue, props.task.id, props.todolistId)\r\n  };\r\n\r\n  const editTaskTitle = useCallback((editedTitle: string) =>\r\n      props.editTaskTitle(editedTitle, props.task.id, props.todolistId),\r\n    [props.editTaskTitle, props.task.id, props.todolistId])\r\n\r\n  return <div className={props.task.status ? 'is-done' : ''}>\r\n    <Checkbox checked={props.task.status === TaskStatuses.Completed}\r\n              disabled={props.task.entityStatus === 'loading'}\r\n              onChange={changeStatus}/>\r\n    <EditableSpan title={props.task.title}\r\n                  editTitle={editTaskTitle}\r\n                  notEdited={props.task.entityStatus === 'loading'}/>\r\n    <IconButton onClick={onClickHandler} disabled={props.task.entityStatus === 'loading'}>\r\n      <Delete/>\r\n    </IconButton>\r\n  </div>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport AddItemForm from '../../../components/AddItemForm/AddItemForm';\r\nimport EditableSpan from '../../../components/EditableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses, TaskType} from '../../../api/tasks-api';\r\nimport {FilterType, TodolistDomainType} from './todolists-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {fetchTasksTC, TaskDomainType} from './tasks-reducer';\r\nimport s from './Todolist.module.css'\r\nimport {AppRootStateType} from '../../../app/store';\r\n\r\ntype TodoListPropsType = {\r\n  todolist: TodolistDomainType\r\n  tasks: Array<TaskDomainType>\r\n  removeTask: (id: string, todoListId: string) => void\r\n  changeFilter: (value: FilterType, todoListId: string) => void\r\n  addTask: (taskTitle: string, todoListId: string) => void\r\n  changeTaskStatus: (status: TaskStatuses, taskId: string, todoListId: string) => void\r\n  removeTodoList: (todoListId: string) => void\r\n  editTaskTitle: (editedTitle: string, taskId: string, todolistId: string) => void\r\n  editTodoListTitle: (editedTitle: string, todoListId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: TodoListPropsType) => {\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn) {\r\n      return\r\n    }\r\n    dispatch(fetchTasksTC(props.todolist.id))\r\n  }, [])\r\n\r\n  const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.changeFilter, props.todolist.id])\r\n  const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.changeFilter, props.todolist.id])\r\n  const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.changeFilter, props.todolist.id])\r\n\r\n  const removeTodoList = useCallback(() => {\r\n    props.removeTodoList(props.todolist.id)\r\n  }, [props.removeTodoList, props.todolist.id])\r\n\r\n  const onAddTask = useCallback((title: string) => {\r\n    props.addTask(title, props.todolist.id)\r\n  }, [props.addTask, props.todolist.id])\r\n\r\n  const editTodoListTitle = useCallback((editedTitle: string) => {\r\n    props.editTodoListTitle(editedTitle, props.todolist.id)\r\n  }, [props.editTodoListTitle, props.todolist.id])\r\n\r\n  let tasksForTodoList = props.tasks;\r\n  if (props.todolist.filter === 'active') {\r\n    tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.New)\r\n  }\r\n  if (props.todolist.filter === 'completed') {\r\n    tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.Completed)\r\n  }\r\n\r\n  return <>\r\n      <h3 className={s.title}>\r\n        <EditableSpan title={props.todolist.title}\r\n                      editTitle={editTodoListTitle}\r\n                      notEdited={props.todolist.entityStatus === 'loading'}/>\r\n        <IconButton onClick={removeTodoList} disabled={props.todolist.entityStatus === 'loading'}>\r\n          <Delete/>\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm addItem={onAddTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n      <ul className={s.tasks}>\r\n        {\r\n          tasksForTodoList.map(t => <Task key={t.id}\r\n                                          task={t}\r\n                                          todolistId={props.todolist.id}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                                          removeTask={props.removeTask}\r\n                                          editTaskTitle={props.editTaskTitle}/>)}\r\n      </ul>\r\n      <div className={s.buttons}>\r\n        <Button variant={props.todolist.filter == 'all' ? 'contained' : 'text'}\r\n                onClick={onAllClickHandler}>All\r\n        </Button>\r\n        <Button variant={props.todolist.filter == 'active' ? 'contained' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n        </Button>\r\n        <Button variant={props.todolist.filter == 'completed' ? 'contained' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n        </Button>\r\n      </div>\r\n    </>\r\n})\r\n\r\n","import {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {createTaskTC, deleteTaskTC, TasksStateType, updateTaskTC} from './Todolist/tasks-reducer';\r\nimport {\r\n  createTodolistTC,\r\n  deleteTodolistTC,\r\n  fetchTodolistsTC,\r\n  FilterType,\r\n  TodolistDomainType,\r\n  todolistsActions, updateTodolistTC\r\n} from './Todolist/todolists-reducer';\r\nimport React, {useCallback, useEffect} from 'react';\r\nimport {TaskStatuses} from '../../api/tasks-api';\r\nimport {createStyles, Grid, makeStyles, Paper, Theme} from '@material-ui/core';\r\nimport AddItemForm from '../../components/AddItemForm/AddItemForm';\r\nimport {Todolist} from './Todolist/TodoList';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    paper: {\r\n      padding: '15px',\r\n      backgroundColor: '#e09f3e'\r\n    },\r\n    addItemFormGrid: {\r\n      padding: '20px',\r\n    }\r\n  })\r\n);\r\n\r\nconst TodolistsList = () => {\r\n  const dispatch = useDispatch();\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn) {\r\n      return\r\n    }\r\n    dispatch(fetchTodolistsTC())\r\n  }, [])\r\n\r\n  const addTask = useCallback((taskTitle: string, todolistId: string) => {\r\n    dispatch(createTaskTC(taskTitle, todolistId))\r\n  }, [dispatch])\r\n\r\n  const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n    dispatch(deleteTaskTC(taskId, todolistId))\r\n  }, [dispatch])\r\n\r\n  const changeTaskStatus = useCallback((status: TaskStatuses, taskId: string, todolistId: string) => {\r\n    dispatch(updateTaskTC({status}, taskId, todolistId))\r\n  }, [dispatch])\r\n\r\n  const editTaskTitle = useCallback((editedTitle: string, taskId: string, todolistId: string) => {\r\n    dispatch(updateTaskTC({title: editedTitle}, taskId, todolistId))\r\n  }, [dispatch])\r\n\r\n  const changeFilter = useCallback((value: FilterType, todoListId: string) => {\r\n    dispatch(todolistsActions.changeTodolistFilterAC(value, todoListId))\r\n  }, [dispatch])\r\n\r\n  const removeTodolist = useCallback((todolistId: string) => {\r\n    dispatch(deleteTodolistTC(todolistId));\r\n  }, [dispatch])\r\n\r\n  const addTodolist = useCallback((title: string) => {\r\n    dispatch(createTodolistTC(title))\r\n  }, [dispatch])\r\n\r\n  const editTodoListTitle = useCallback((editedTitle: string, todoListId: string) => {\r\n    dispatch(updateTodolistTC(editedTitle, todoListId))\r\n  }, [dispatch])\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={'/login'}/>\r\n  }\r\n\r\n  return <>\r\n    <Grid container className={classes.addItemFormGrid}>\r\n      <AddItemForm addItem={addTodolist}/>\r\n    </Grid>\r\n    <Grid container spacing={3}>\r\n      {todolists.map(tl => {\r\n        let tasksForTodoList = tasks[tl.id];\r\n        return <Grid item xs={12} sm={6} md={4} lg={3} key={tl.id}>\r\n          <Paper elevation={3} className={classes.paper}>\r\n            <Todolist todolist={tl}\r\n                      tasks={tasksForTodoList}\r\n                      removeTask={removeTask}\r\n                      addTask={addTask}\r\n                      changeFilter={changeFilter}\r\n                      changeTaskStatus={changeTaskStatus}\r\n                      removeTodoList={removeTodolist}\r\n                      editTaskTitle={editTaskTitle}\r\n                      editTodoListTitle={editTodoListTitle}/>\r\n          </Paper>\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n  </>\r\n}\r\n\r\nexport default TodolistsList;","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {appActions} from '../../app/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst ErrorSnackbar = () => {\r\n  const dispatch = useDispatch();\r\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n   dispatch(appActions.setErrorAC(null))\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          {error}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}\r\nexport default ErrorSnackbar;","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {login} from './auth-reducer';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport s from './Login.module.css'\r\n\r\n\r\ntype FormikErrorType = {\r\n  email?: string\r\n  password?: string\r\n  rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch();\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const formik = useFormik({\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {};\r\n      if (!values.email) {\r\n        errors.email = 'Email is required';\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n      }\r\n\r\n      if (!values.password) {\r\n        errors.password = 'Password is required';\r\n      } else if (values.password.length > 15) {\r\n        errors.password = 'Must be 15 characters or less';\r\n      }\r\n      return errors;\r\n    },\r\n\r\n    initialValues: {\r\n      email: 'da6ulya888@gmail.com',\r\n      password: 'reactsamurai',\r\n      rememberMe: false\r\n    },\r\n    onSubmit: (values) => {\r\n      dispatch(login(values))\r\n      formik.resetForm()\r\n    },\r\n  });\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to={'/'}/>\r\n  }\r\n\r\n  return (\r\n  <Grid container justify=\"center\">\r\n    <Grid item xs={6}>\r\n      <form onSubmit={formik.handleSubmit} className={s.form}>\r\n      <FormControl>\r\n        <FormLabel>\r\n          <p>To log in get registered\r\n            <a href={'https://social-network.samuraijs.com/'}\r\n               target={'_blank'}>here\r\n            </a>\r\n          </p>\r\n          <p>or use common test account credentials:</p>\r\n          <p>Email: free@samuraijs.com</p>\r\n          <p>Password: free</p>\r\n        </FormLabel>\r\n        <FormGroup>\r\n          <TextField\r\n            label=\"Email\"\r\n            margin=\"normal\"\r\n            {...formik.getFieldProps('email')}\r\n          />\r\n          {formik.touched.email && formik.errors.email\r\n            ? (\r\n            <div className={s.fieldError}>{formik.errors.email}</div>)\r\n            : null}\r\n          <TextField\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            {...formik.getFieldProps('password')}\r\n          />\r\n          {formik.touched.password && formik.errors.password\r\n            ? (\r\n            <div className={s.fieldError}>{formik.errors.password}</div>)\r\n            : null}\r\n          <FormControlLabel\r\n            label={'Remember me'}\r\n            control={<Checkbox\r\n              {...formik.getFieldProps('rememberMe')}\r\n              checked={formik.values.rememberMe}/>}\r\n          />\r\n          <Button type={'submit'}\r\n                  variant={'contained'}\r\n                  color={'secondary'}>Login</Button>\r\n        </FormGroup>\r\n      </FormControl>\r\n      </form>\r\n    </Grid>\r\n  </Grid>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport s from './Error404.module.css'\r\nimport errorImage from './../../assets/404-error.jpg'\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {Login} from '../../features/Login/Login';\r\n\r\nexport const Error404 = () => {\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={'/login'}/>\r\n  }\r\n\r\n  return <div className={s.error_block}>\r\n    <img className={s.error_img} src={errorImage} alt=\"404\"/>\r\n    <div className={s.error_text}>\r\n      <div className={s.error_header}>OOOPS! PAGE NOT FOUND...</div>\r\n      <p className={s.error_paragraph}>You must have picked the wrong door because I haven't been able to\r\n        lay my eye on the page you've been searching for.</p>\r\n    </div>\r\n  </div>\r\n}","import {AppBar, Box, Button, createStyles, IconButton, makeStyles, Theme, Toolbar} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport React, {useCallback} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {logout} from '../../features/Login/auth-reducer';\r\nimport AccountCircleSharpIcon from '@material-ui/icons/AccountCircleSharp';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    menuButton: {\r\n      marginRight: theme.spacing(0),\r\n    },\r\n    loginItems: {\r\n      marginLeft: 'auto',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n    },\r\n    logoutBtn: {\r\n      marginLeft: '20px',\r\n    }\r\n  })\r\n);\r\n\r\nexport const Header = () => {\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const login = useSelector<AppRootStateType, string | null>(state => state.auth.login)\r\n  const dispatch = useDispatch();\r\n\r\n  const classes = useStyles();\r\n\r\n  const onLogout = useCallback(() => {\r\n    dispatch(logout())\r\n  }, [dispatch])\r\n\r\n  return <AppBar position=\"static\">\r\n\r\n    <Toolbar>\r\n      <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className={classes.menuButton}>\r\n        <Menu/>\r\n      </IconButton>\r\n      {isLoggedIn &&\r\n      <Box className={classes.loginItems}>\r\n        <AccountCircleSharpIcon/> {login}\r\n        <Button color=\"secondary\"\r\n                onClick={onLogout}\r\n                variant={'contained'}\r\n                className={classes.logoutBtn}>LOGOUT</Button>\r\n      </Box>}\r\n    </Toolbar>\r\n\r\n  </AppBar>\r\n}","import React from 'react';\r\nimport s from './Preloader.module.css'\r\n\r\nexport const Preloader = () => {\r\n  return <div className={s.preloaderPage}>\r\n    <div className={s.preloader}>Loading...</div>\r\n  </div>\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n  CircularProgress,\r\n  createMuiTheme,\r\n  createStyles,\r\n  Grid,\r\n  LinearProgress,\r\n  makeStyles,\r\n  Theme,\r\n  ThemeProvider\r\n} from '@material-ui/core';\r\nimport TodolistsList from '../features/TodolistsList/TodolistsList';\r\nimport ErrorSnackbar from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {initializeApp, RequestStatusType} from './app-reducer';\r\nimport {AppRootStateType} from './store';\r\nimport {BrowserRouter, HashRouter, Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from '../features/Login/Login';\r\nimport {Error404} from '../components/Error404/Error404';\r\nimport {Header} from '../components/Header/Header';\r\nimport {Preloader} from '../components/Preloader/Preloader';\r\n\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#335c67',\r\n    },\r\n    secondary: {\r\n      main: '#9e2a2b',\r\n    },\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      maxWidth: '100vw',\r\n      backgroundColor: '#fff3b0',\r\n      minHeight: '100vh',\r\n      paddingBottom: '20px'\r\n    },\r\n    headerGrid: {\r\n      width: '100%',\r\n    }\r\n  })\r\n);\r\n\r\nconst AppWithRedux = () => {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n  const isAppInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isAppInitialized)\r\n  const dispatch = useDispatch();\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n      dispatch(initializeApp())\r\n    },\r\n    [])\r\n\r\n  if (!isAppInitialized) {\r\n    return <Preloader/>\r\n  }\r\n\r\n  return <ThemeProvider theme={theme}>\r\n    <HashRouter>\r\n      <Grid container direction='column' className={classes.root}>\r\n\r\n        <Grid item className={classes.headerGrid}>\r\n          <Header/>\r\n          {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n        </Grid>\r\n\r\n        <Grid item container>\r\n          <Grid item xs={1} sm={1}/>\r\n          <Grid item xs={10} sm={10}>\r\n          <Switch>\r\n            <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n            <Route path={'/login'} render={() => <Login/>}/>\r\n            <Route path={'/404'} render={() => <Error404/>}/>\r\n            <Redirect from={'*'} to={'/404'}/>\r\n          </Switch>\r\n          <ErrorSnackbar/>\r\n          </Grid>\r\n          <Grid item xs={1} sm={1}/>\r\n        </Grid>\r\n      </Grid>\r\n    </HashRouter>\r\n  </ThemeProvider>\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from '../features/TodolistsList/Todolist/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/Todolist/todolists-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport appReducer from './app-reducer';\r\nimport authReducer from '../features/Login/auth-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n  auth: authReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './app/AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <AppWithRedux/>\r\n  </Provider>,\r\n  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error_block\":\"Error404_error_block__3ekg7\",\"error_img\":\"Error404_error_img__wyXSY\",\"error_text\":\"Error404_error_text__3guRy\",\"error_header\":\"Error404_error_header__1keSq\",\"error_paragraph\":\"Error404_error_paragraph__2NwmQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Todolist_title__1kicR\",\"buttons\":\"Todolist_buttons__1dfgv\",\"tasks\":\"Todolist_tasks__1lxiG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__24L60\",\"fieldError\":\"Login_fieldError__2izbz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderPage\":\"Preloader_preloaderPage__l0zWK\",\"preloader\":\"Preloader_preloader__1Vtxd\",\"load4\":\"Preloader_load4__v68rD\"};"],"sourceRoot":""}